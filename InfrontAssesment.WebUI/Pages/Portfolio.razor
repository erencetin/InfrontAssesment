@page "/portfolio"

<PageTitle>Weather forecast</PageTitle>

@using InfrontAssesment.Core.Dtos
@using InfrontAssesment.Core.Interfaces
@using InfrontAssesment.Core.Models
@using Microsoft.EntityFrameworkCore

@inject IStockOperationService stockOperationService
<h1>Your Stock Portfolio</h1>

<p>Manage your portfolio</p>

<div class="card w-25">
    <div class="card-header">
        Add Stock
    </div>
    <div class="card-body">
        <table>
            <tr>
                <td>
                    Symbol
                </td>
                <td>
                    <input class="input-group" @bind="@symbol"  type="text" />
                </td>
            </tr>
            <tr>
                <td>
                    Contracts
                </td>
                <td>
                    <input type="number" @bind="@contractCount" />

                </td>
            </tr>
            <tr>
                <td>
                    Buy Price
                </td>
                <td>
                    <input type="number" @bind="@buyPrice" />

                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn btn-success" @onclick="Buy">Buy</button>
                </td>
            </tr>
        </table>

    </div>
</div>
@if (!persistedStocks.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    
    <table class="table">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Name</th>
                <th>Price</th>
                <th>#</th>
                <th>Bought</th>
                <th>Current</th>
                <th>Yield</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in persistedStocks)
            {
                <tr>
                    <td>@stock.Symbol</td>
                    <td>@stock.Name</td>
                    <td>@stock.CurrentPrice</td>
                    <td>@stock.NumberOfContracts</td>
                    <td>@stock.BuyValue</td>
                    <td>@stock.CurrentValue</td>
                    <td>@stock.Yield</td>
                    <td><button class="btn btn-danger" @onclick="() => Delete(stock)">Close</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<StockDto> persistedStocks = new List<StockDto>();
    private IEnumerable<PriceData> stockPrices = new List<PriceData>();
    private List<string> symbols = new List<string>();

    private string symbol;
    private int? contractCount = 0;
    private decimal? buyPrice = 0;
    protected override async Task OnInitializedAsync()
    {
        persistedStocks = await stockOperationService.GetStocksInPortfolio();
        symbols = stockPrices.Select(s => s.VwdKey).ToList();
    }

    private async Task Delete(StockDto stock)
    {
        await stockOperationService.CloseStock(stock);
    }

    private void Buy()
    {
        stockOperationService.BuyStock(symbol, buyPrice.Value, contractCount.Value);
    }
}
