@page "/portfolio"

<PageTitle>Weather forecast</PageTitle>

@using InfrontAssesment.Core.Dtos
@using InfrontAssesment.Core.Interfaces
@using InfrontAssesment.Core.Models
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JsRuntime
@inject IStockOperationService stockOperationService
<h1>Your Stock Portfolio</h1>

<p>Manage your portfolio</p>

<div class="card w-50">
    <div class="card-header">
        Add Stock
    </div>
    <div class="card-body">
        <table>
            <tr>
                <td>
                    Symbol
                </td>
                <td>
                    <input class="input-group" @onchange="@SymbolChanged"  type="text" />
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="Find">Find</button>
                </td>
            </tr>
            <tr>
                <td>
                    Contracts
                </td>
                <td>
                    <input type="number" min="0" @bind="@contractCount" />
                </td>
                <td>

                </td>
            </tr>
            <tr>
                <td>
                    Buy Price
                </td>
                <td>
                    <input type="number" min="0" @bind="@buyPrice" />

                </td>
                <td>

                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn btn-success" disabled="@buyDisabled" @onclick="Buy">Buy</button>
                </td>
            </tr>
        </table>

    </div>
</div>
@if (!persistedStocks.Any())
{
    <p><em>...</em></p>
}
else
{
    
    <table class="table">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Name</th>
                <th>Price</th>
                <th>#</th>
                <th>Bought</th>
                <th>Current</th>
                <th>Yield %</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in persistedStocks)
            {
                <tr>
                    <td>@stock.Symbol</td>
                    <td>@stock.Name</td>
                    <td>@stock.CurrentPrice</td>
                    <td>@stock.NumberOfContracts</td>
                    <td>@stock.BuyValue</td>
                    <td>@stock.CurrentValue</td>
                    <td>@stock.Yield</td>
                    <td><button class="btn btn-danger" @onclick="() => Delete(stock.Symbol)">Close</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<StockDto> persistedStocks = new List<StockDto>();
    private List<string> symbols = new List<string>();

    private string symbol;
    private int? contractCount = 0;
    private decimal? buyPrice = 0;
    private bool buyDisabled = true;
    protected override async Task OnInitializedAsync()
    {
        await LoadPersistedStocks();
    }
    private async Task LoadPersistedStocks()
    {
        persistedStocks = await stockOperationService.GetStocksInPortfolio();
        StateHasChanged();
    }
    private async Task Delete(string symbol)
    {
        await stockOperationService.CloseStock(symbol);
        await LoadPersistedStocks();
    }

    private async void Buy()
    {
        if(!string.IsNullOrEmpty(symbol) && buyPrice.HasValue && contractCount.HasValue &&  buyPrice > 0 && contractCount > 0)
        {
            await stockOperationService.BuyStock(symbol, buyPrice.Value, contractCount.Value);
            await LoadPersistedStocks();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please enter a valid stock and price information.");
        }
    }

    private async Task Find()
    {
        if (!string.IsNullOrEmpty(symbol))
        {
            var priceData = await stockOperationService.GetPriceData(symbol.ToUpper());
            if(priceData == null)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Stock could not be found.");
            } else
            {
                buyPrice = priceData.Price;
                contractCount = 1;
                buyDisabled = false;
            }
        } 
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please enter a correct symbol ");
        }
    }

    private void SymbolChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        symbol = (string)args.Value;
        buyDisabled = true;
    }
}
